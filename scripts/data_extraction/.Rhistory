library(rmarkdown)
library(data.table)
library(taxizedb)
library(myTAI)
library(tidyr)
library(shiny)
library(DT)
library(plyr)
library(dplyr)
library(stringr)
library(d3Tree)
library(billboarder)
library(nbaR)
getwd()
queryParams <- list("sourceSystem.code"="NSR")
check <- data.frame()
queryParams[["acceptedName.scientificNameGroup"]] <- "Tytthaspis sedecimpunctata"
check <- bind_rows(nsrSpecimens, taxon_query(queryParams))
queryParams <- list("sourceSystem.code"="NSR")
check <- data.frame()
queryParams[["acceptedName.scientificNameGroup"]] <- "Tytthaspis sedecimpunctata"
check <- bind_rows(check, taxon_query(queryParams))
View(check)
queryParams <- list("sourceSystem.code"="CRS")
check <- data.frame()
#queryParams[["acceptedName.scientificNameGroup"]] <- "RGM.481910"
check <- bind_rows(check, metadata_get_source_systems("RGM.481910"))
queryParams <- list("sourceSystem.code"="CRS")
check <- data.frame()
#queryParams[["acceptedName.scientificNameGroup"]] <- "RGM.481910"
check <- bind_rows(data.frame, metadata_get_source_systems("RGM.481910"))
queryParams <- list("sourceSystem.code"="CRS")
check <- data.frame()
#queryParams[["acceptedName.scientificNameGroup"]] <- "RGM.481910"
check <- bind_rows(check, metadata_get_source_systems(data.frame, "RGM.481910"))
queryParams <- list("sourceSystem.code"="CRS")
check <- data.frame()
#queryParams[["acceptedName.scientificNameGroup"]] <- "RGM.481910"
check <- bind_rows(check, metadata_get_source_systems(data.frame, c("RGM.481910")))
queryParams <- list("sourceSystem.code"="CRS") #removed queryParams <- list(queryparams) before <- list(sourceS.. etc)
natSpecimens <- data.frame()
queryParams[["identifications.defaultClassification.genus"]] <- "Abgrallaspis cyanophylli"
specimen_query(queryParams)
natSpecimens <- bind_rows(natSpecimens, specimen_query(queryParams))
queryParams <- list("sourceSystem.code"="CRS") #removed queryParams <- list(queryparams) before <- list(sourceS.. etc)
natSpecimens <- data.frame()
queryParams[["identifications.defaultClassification.genus"]] <- "Abax carinatus"
specimen_query(queryParams)
natSpecimens <- bind_rows(natSpecimens, specimen_query(queryParams))
queryParams <- list("sourceSystem.code"="CRS") #removed queryParams <- list(queryparams) before <- list(sourceS.. etc)
natSpecimens <- data.frame()
queryParams[["identifications.defaultClassification.genus"]] <- "Abax ater"
specimen_query(queryParams)
natSpecimens <- bind_rows(natSpecimens, specimen_query(queryParams))
View(natSpecimens)
nsrSpecies.file <- sprintf("%s/data/insert_files/nsr_species.csv", REPO_HOME)
REPO_HOME <- paste(dirname(getwd()), sep = "")
REPO_HOME
getwd()
nsrSpecies.file <- sprintf("%s/data/insert_files/nsr_species.csv", REPO_HOME)
nsrSpecies <- read.csv(nsrSpecies.file, encoding="UTF-8")
setwd('..')
REPO_HOME <- paste(dirname(getwd()), sep = "")
nsrSpecies.file <- sprintf("%s/data/insert_files/nsr_species.csv", REPO_HOME)
nsrSpecies <- read.csv(nsrSpecies.file, encoding="UTF-8")
natIn <- unique(gsub("([A-Za-z]+).*", "\\1", nsrSpecies$species_name))
## Query Naturalis specimen records (duration: ~20m)
## Method: nbaR 'specimen_query'
## Parameters: CRS source code and list of selected species
queryParams <- list("sourceSystem.code"="CRS") #removed queryParams <- list(queryparams) before <- list(sourceS.. etc)
natSpecimens <- data.frame()
for(x in 1:5){
queryParams[["identifications.defaultClassification.genus"]] <- natIn[x]
specimen_query(queryParams)
natSpecimens <- bind_rows(natSpecimens, specimen_query(queryParams))
}
View(natSpecimens)
queryParams <- list("sourceSystem.code"="CRS") #removed queryParams <- list(queryparams) before <- list(sourceS.. etc)
natSpecimens <- data.frame()
for(x in 1:5){
queryParams[["identifications.defaultClassification.genus"]] <- natIn[x]
natSpecimens <- bind_rows(natSpecimens, specimen_query(queryParams))
}
queryParams <- list("sourceSystem.code"="NSR") #removed queryParams <- list(queryparams) before <- list(sourceS.. etc)
natSpecimens <- data.frame()
for(x in 1:5){
queryParams[["identifications.defaultClassification.genus"]] <- natIn[x]
natSpecimens <- bind_rows(natSpecimens, specimen_query(queryParams))
}
find <- list("sourceSystem.code"="CRS", "RMNH.INS.710753") #removed queryParams <- list(queryparams) before <- list(sourceS.. etc)
withid <- data.frame()
withid <- bind_rows(withid, specimen_find(find))
withid <- data.frame()
withid <- bind_rows(withid, specimen_find("RMNH.INS.710753"))
withid <- data.frame()
withid <- bind_rows(withid, specimen_find("ZMA.COEL.5033"))
withid <- data.frame()
withid <- bind_rows(withid, specimen_find("ZMA.COEL.5033@CRS"))
View(withid)
withid <- data.frame()
withid <- bind_rows(withid, specimen_find_by_unit_id("ZMA.COEL.5033"))
View(withid)
View(find)
View(withid)
library(rmarkdown)
library(data.table)
library(taxizedb)
library(myTAI)
library(tidyr)
library(shiny)
library(DT)
library(plyr)
library(dplyr)
library(stringr)
library(d3Tree)
library(billboarder)
library(nbaR)
setwd('..')
REPO_HOME <- paste(dirname(getwd()), sep = "")
REPO_HOME
getwd()
## Removed the last empty row by hand (error)
nsrTaxonomy.file <- sprintf('%s/data/input_files/NSR_taxonomy.csv', REPO_HOME)
## Skip first few lines untill header
nsrTaxonomy <- read.csv(nsrTaxonomy.file, encoding="UTF-8", skip = 4, sep = "\t",  na.strings="NA")
## Get the necessary rows (scientific_name, common_name, rank, nsr_id)
nsrTaxonomy <- subset(nsrTaxonomy, select = c(1,2,3))
nsrTaxonomy <- nsrTaxonomy %>% filter(rank == "soort")
## Split genus, species and identification reference
nsrTaxonomy <- str_split_fixed(nsrTaxonomy$scientific_name, " ", 3)
## Drop empty lines (CHECK)
nsrTaxonomy <- as.data.frame(nsrTaxonomy) %>% drop_na()
## Give columnnames
colnames(nsrTaxonomy) <- c("genus", "species", "identification_reference")
## Remove parentheses for every identification reference
nsrTaxonomy$identification_reference <- gsub('[()]','',nsrTaxonomy$identification_reference)
## Merge the genus and species to binomial in new column
nsrTaxonomy$species_name <- paste(nsrTaxonomy$genus, nsrTaxonomy$species)
## Keep rows where species do not dots or parenthesis in their name
nsrTaxonomy <-  nsrTaxonomy[grep('[()\\.]', nsrTaxonomy$species, invert = TRUE),]
## Remove the × symbol in species_name from all the rows (are there for three species names)
nsrTaxonomy$species_name <- gsub('[\\×]','',nsrTaxonomy$species_name)
## Keep rows where identification references do not have [] in their name (for an instance with [unknown])
nsrTaxonomy <-  nsrTaxonomy[grep('[\\[\\]', nsrTaxonomy$identification_reference, invert = TRUE),]
## Fill empty strings with NA's so these rows can be dropped
nsrTaxonomy <- nsrTaxonomy  %>% mutate_all(na_if,"")
## Drop rows containing NA's
nsrTaxonomy <- na.omit(nsrTaxonomy)
## Add unique identifier counting from 0
nsrTaxonomy <- unique(nsrTaxonomy)
nsrTaxonomy$species_id <- seq.int(from = 0, to = nrow(nsrTaxonomy)-1)
## Keep and rearrange columns (species_id, species_name, identification_reference)
nsrSpecies <- subset(nsrTaxonomy, select = c(5, 4, 3))
nsrSpecies$species_name <- gsub("\t", '', nsrSpecies$species_name)
nsrSpecies$identification_reference <- gsub("\t", '', nsrSpecies$identification_reference)
write.csv(nsrSpecies, file=sprintf('%s/data/insert_files/nsr_species.csv', REPO_HOME), fileEncoding="utf-8", row.names = FALSE)
## Removed the last empty row by hand (error)
nsrTaxonomy.file <- sprintf('%s/data/input_files/NSR_taxonomy.csv', REPO_HOME)
## Skip first few lines untill header
nsrTaxonomy <- read.csv(nsrTaxonomy.file, encoding="UTF-8", skip = 4, sep = "\t",  na.strings="NA")
## Get the necessary rows (scientific_name, common_name, rank, nsr_id)
nsrTaxonomy <- subset(nsrTaxonomy, select = c(1,2,3))
nsrTaxonomy <- nsrTaxonomy %>% filter(rank == "soort")
## Split genus, species and identification reference
nsrTaxonomy <- str_split_fixed(nsrTaxonomy$scientific_name, " ", 3)
## Drop empty lines (CHECK)
nsrTaxonomy <- as.data.frame(nsrTaxonomy) %>% drop_na()
## Give columnnames
colnames(nsrTaxonomy) <- c("genus", "species", "identification_reference")
## Remove parentheses for every identification reference
nsrTaxonomy$identification_reference <- gsub('[()]','',nsrTaxonomy$identification_reference)
## Merge the genus and species to binomial in new column
nsrTaxonomy$species_name <- paste(nsrTaxonomy$genus, nsrTaxonomy$species)
## Keep rows where species do not dots or parenthesis in their name
nsrTaxonomy <-  nsrTaxonomy[grep('[()\\.]', nsrTaxonomy$species, invert = TRUE),]
## Remove the × symbol in species_name from all the rows (are there for three species names)
nsrTaxonomy$species_name <- gsub('[\\×]','',nsrTaxonomy$species_name)
## Keep rows where identification references do not have [] in their name (for an instance with [unknown])
nsrTaxonomy <-  nsrTaxonomy[grep('[\\[\\<]', nsrTaxonomy$identification_reference, invert = TRUE),]
## Fill empty strings with NA's so these rows can be dropped
nsrTaxonomy <- nsrTaxonomy  %>% mutate_all(na_if,"")
## Drop rows containing NA's
nsrTaxonomy <- na.omit(nsrTaxonomy)
## Add unique identifier counting from 0
nsrTaxonomy <- unique(nsrTaxonomy)
nsrTaxonomy$species_id <- seq.int(from = 0, to = nrow(nsrTaxonomy)-1)
## Keep and rearrange columns (species_id, species_name, identification_reference)
nsrSpecies <- subset(nsrTaxonomy, select = c(5, 4, 3))
nsrSpecies$species_name <- gsub("\t", '', nsrSpecies$species_name)
nsrSpecies$identification_reference <- gsub("\t", '', nsrSpecies$identification_reference)
write.csv(nsrSpecies, file=sprintf('%s/data/insert_files/nsr_species.csv', REPO_HOME), fileEncoding="utf-8", row.names = FALSE)
## Load species and synonyms from the NSR files, respectively
# nsrSynonyms.file <- sprintf('%s/data/insert_files/nsr_synonym.csv', REPO_HOME)
# nsrSynonyms <- read.csv(nsrSynonyms.file, encoding="UTF-8")
# nsrSpecies.file <- sprintf("%s/data/insert_files/nsr_species.csv", REPO_HOME)
# nsrSpecies <- read.csv(nsrSpecies.file, encoding="UTF-8")
nsrTaxonomy.file <- sprintf('%s/data/input_files/NSR_taxonomy.csv', REPO_HOME)
## Skip first few lines untill header
nsrTaxonomy <- read.csv(nsrTaxonomy.file, encoding="UTF-8", skip = 4, sep = "\t",  na.strings="NA")
## Get the necessary rows (scientific_name, common_name, rank, nsr_id)
nsrTaxonomy <- subset(nsrTaxonomy, select = c(1,2,3))
nsrTaxonomy <- nsrTaxonomy %>% filter(rank == "soort")
## Split genus, species and identification reference
nsrTaxonomy <- str_split_fixed(nsrTaxonomy$scientific_name, " ", 3)
## Drop empty lines (CHECK)
nsrTaxonomy <- as.data.frame(nsrTaxonomy) %>% drop_na()
## Give columnnames
colnames(nsrTaxonomy) <- c("genus", "species", "identification_reference")
## Remove parentheses for every identification reference
nsrTaxonomy$identification_reference <- gsub('[()]','',nsrTaxonomy$identification_reference)
## Merge the genus and species to binomial in new column
nsrTaxonomy$species_name <- paste(nsrTaxonomy$genus, nsrTaxonomy$species)
## Keep rows where species do not dots or parenthesis in their name
nsrTaxonomy <-  nsrTaxonomy[grep('[()\\.]', nsrTaxonomy$species, invert = TRUE),]
## Remove the × symbol in species_name from all the rows (are there for three species names)
nsrTaxonomy$species_name <- gsub('[\\×]','',nsrTaxonomy$species_name)
## Keep rows where identification references do not have [] in their name (for an instance with [unknown])
nsrTaxonomy <-  nsrTaxonomy[grep('[<>\\[\\]', nsrTaxonomy$identification_reference, invert = TRUE),]
## Fill empty strings with NA's so these rows can be dropped
nsrTaxonomy <- nsrTaxonomy  %>% mutate_all(na_if,"")
## Drop rows containing NA's
nsrTaxonomy <- na.omit(nsrTaxonomy)
## Add unique identifier counting from 0
nsrTaxonomy <- unique(nsrTaxonomy)
nsrTaxonomy$species_id <- seq.int(from = 0, to = nrow(nsrTaxonomy)-1)
## Keep and rearrange columns (species_id, species_name, identification_reference)
nsrSpecies <- subset(nsrTaxonomy, select = c(5, 4, 3))
nsrSpecies$species_name <- gsub("\t", '', nsrSpecies$species_name)
nsrSpecies$identification_reference <- gsub("\t", '', nsrSpecies$identification_reference)
write.csv(nsrSpecies, file=sprintf('%s/data/insert_files/nsr_species.csv', REPO_HOME), fileEncoding="utf-8", row.names = FALSE)
## Removed the last empty row by hand (error)
nsrTaxonomy.file <- sprintf('%s/data/input_files/NSR_taxonomy.csv', REPO_HOME)
## Skip first few lines untill header
nsrTaxonomy <- read.csv(nsrTaxonomy.file, encoding="UTF-8", skip = 4, sep = "\t",  na.strings="NA")
## Get the necessary rows (scientific_name, common_name, rank, nsr_id)
nsrTaxonomy <- subset(nsrTaxonomy, select = c(1,2,3))
nsrTaxonomy <- nsrTaxonomy %>% filter(rank == "soort")
## Split genus, species and identification reference
nsrTaxonomy <- str_split_fixed(nsrTaxonomy$scientific_name, " ", 3)
## Drop empty lines (CHECK)
nsrTaxonomy <- as.data.frame(nsrTaxonomy) %>% drop_na()
## Give columnnames
colnames(nsrTaxonomy) <- c("genus", "species", "identification_reference")
## Remove parentheses for every identification reference
nsrTaxonomy$identification_reference <- gsub('[()]','',nsrTaxonomy$identification_reference)
## Merge the genus and species to binomial in new column
nsrTaxonomy$species_name <- paste(nsrTaxonomy$genus, nsrTaxonomy$species)
## Keep rows where species do not dots or parenthesis in their name
nsrTaxonomy <-  nsrTaxonomy[grep('[()\\.]', nsrTaxonomy$species, invert = TRUE),]
## Remove the × symbol in species_name from all the rows (are there for three species names)
nsrTaxonomy$species_name <- gsub('[\\×]','',nsrTaxonomy$species_name)
## Keep rows where identification references do not have [] in their name (for an instance with [unknown])
nsrTaxonomy <-  nsrTaxonomy[grep('[\\×\\[\\]', nsrTaxonomy$identification_reference, invert = TRUE),]
## Fill empty strings with NA's so these rows can be dropped
nsrTaxonomy <- nsrTaxonomy  %>% mutate_all(na_if,"")
## Drop rows containing NA's
nsrTaxonomy <- na.omit(nsrTaxonomy)
## Add unique identifier counting from 0
nsrTaxonomy <- unique(nsrTaxonomy)
nsrTaxonomy$species_id <- seq.int(from = 0, to = nrow(nsrTaxonomy)-1)
## Keep and rearrange columns (species_id, species_name, identification_reference)
nsrSpecies <- subset(nsrTaxonomy, select = c(5, 4, 3))
nsrSpecies$species_name <- gsub("\t", '', nsrSpecies$species_name)
nsrSpecies$identification_reference <- gsub("\t", '', nsrSpecies$identification_reference)
write.csv(nsrSpecies, file=sprintf('%s/data/insert_files/nsr_species.csv', REPO_HOME), fileEncoding="utf-8", row.names = FALSE)
# nsr_table <- inner_join(nsrSynonyms, nsrSpecies, by=c("taxon_name"="species_name",
#            "taxon_author"="identification_reference"))
nsrSpecies[,"species_name"] # can now be x[,"species_name"]
## Select species for taxon data retrieval
nsrIn <- tolower(nsrSpecies[, "species_name"])
head(nsrIn, 3)
## Query NSR taxon records (duration: ~40m)
## Method: nbaR 'taxon_query'
## Parameters: NSR source code and list of selected species
queryParams <- list("sourceSystem.code"="NSR")
nsrSpecimens <- data.frame()
for(x in 1:length(nsrIn)){
queryParams[["acceptedName.scientificNameGroup"]] <- nsrIn[x]
nsrSpecimens <- bind_rows(nsrSpecimens, taxon_query(queryParams))
}
## Access and extract required taxonomic fields from retrieved taxon records
nsrBackbone = data.frame()
for(x in 1:nrow(nsrSpecimens)){
tryCatch({
c.id=nsrSpecimens$sourceSystemId[x]
c.kingdom=nsrSpecimens$defaultClassification$kingdom[x]
c.phylum=nsrSpecimens$defaultClassification$phylum[x]
c.class=nsrSpecimens$defaultClassification$className[x]
c.order=nsrSpecimens$defaultClassification$order[x]
c.family=nsrSpecimens$defaultClassification$family[x]
c.genus=nsrSpecimens$defaultClassification$genus[x]
c.species=nsrSpecimens$acceptedName$specificEpithet[x]
c.authority=nsrSpecimens$acceptedName$authorshipVerbatim[x]
row <- data.frame(cbind(tax_id=c.id,kingdom=c.kingdom,phylum=c.phylum,class=c.class,
order=c.order,family=c.family,genus=c.genus,
species=paste(c.genus,c.species),identification_reference=c.authority))
nsrBackbone <- bind_rows(nsrBackbone, row)
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
## Remove parenthesis around the authority for consistency across data sets
nsrBackbone$identification_reference = gsub("[()]", "", nsrBackbone$identification_reference)
## Match taxonomic data to respective species ID, by species name
nsrBackbone <- left_join(nsrBackbone, nsrSpecies[1:2], by=c("species"="species_name")) %>%
.[,c(1,10,2,3,4,5,6,7,8,9)]
nsrBackbone <- unique(nsrBackbone)
## nsrBackbone after binding them to their species id by name (nsrSpecies), 10 columns (tax_id got added)
## Write NSR data to file
write.csv(nsrBackbone, file=sprintf('%s/data/insert_files/tree_nsr.csv', REPO_HOME),
row.names=FALSE, fileEncoding="utf-8")
## Clean up query variables
rm(x, row, queryParams, list = ls()[grep("^c.", ls())])
## Download taxonomic database (options: ncbi, itis, gbif, col, wfo)
## Used data source: NCBI
db_download_ncbi()
## Load species names from the NSR data set
taxidIn <- nsrSpecies[, "species_name"]
## Match species names to NCBI taxon IDs
taxidOut <- taxizedb::name2taxid(taxidIn, db="ncbi", out_type="summary")
head(taxidOut,3)
## NCBI taxon ID's
## Isolate taxon IDs from output, save as vector
treeIn <- as.vector(taxidOut$id)
head(treeIn,3)
## Only id's
## Retrieve taxonomic hierarchy for each taxon ID
treeOut <- taxizedb::classification(treeIn, db="ncbi", row=1, verbose=FALSE)
head(treeOut,3)
## Parse out the taxonomy levels/factors that you require
taxdata = data.frame()
for(x in 1:length(treeOut)){
tryCatch({
for(i in 1:length(treeOut[[x]][[1]])) {
c.tax_id=filter(treeOut[[x]])$id[[i]]
c.parent_tax_id=NULL
c.rank=filter(treeOut[[x]])$rank[[i]]
c.name=filter(treeOut[[x]])$name[[i]]
tryCatch({
c.parent_tax_id=filter(treeOut[[x]])$id[[i-1]]
}, error=function(e){c.parent_tax_id=NULL})
row <- data.frame(cbind(tax_id=c.tax_id,parent_tax_id=c.parent_tax_id,
rank=c.rank, name=c.name))
# Check if record exists
if (nrow(merge(row,taxdata))==0) {
taxdata <- bind_rows(taxdata, row)
}
}
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
View(nsrTaxonomy)
View(nsrTaxonomy)
## Match hierarchies to NSR species names by taxon IDs
## (Accounting for use of synonymous names within NCBI)
ncbiBackbone <- left_join(taxdata, taxidOut, by=c("tax_id"="id"),
suffix=c("","_nsr")) %>%
left_join(., nsrSpecies[1:2], by=c("name_nsr" = "species_name")) %>%
.[, c(1,6,4,2,3)] # Reaarange columns, drop 'name_nsr' column
ncbiBackbone <- unique(ncbiBackbone)
## Write NCBI data to file
write.csv(ncbiBackbone, file=sprintf('%s/data/insert_files/tree_ncbi.csv', REPO_HOME),
row.names=FALSE, fileEncoding="utf-8", na="")
## Clean up query variables
rm(x, i, row, list = ls()[grep("^c.", ls())])
## Select species for taxon data retrieval
## Ensuring to select only binomial names
natIn <- unique(gsub("([A-Za-z]+).*", "\\1", nsrSpecies$species_name))
## Query Naturalis specimen records (duration: ~20m)
## Method: nbaR 'specimen_query'
## Parameters: CRS source code and list of selected species
queryParams <- list("sourceSystem.code"="CRS") #removed queryParams <- list(queryparams) before <- list(sourceS.. etc)
natSpecimens <- data.frame()
for(x in 1:length(natIn)){
queryParams[["identifications.defaultClassification.genus"]] <- natIn[x]
specimen_query(queryParams)
natSpecimens <- bind_rows(natSpecimens, specimen_query(queryParams))
}
## natSpecimens (13 rows, with @CRS!!)
## Access and extract required data fields from retrieved specimen records
natSpecies = data.frame()
for(x in 1:nrow(natSpecimens)){
tryCatch({
c.genus=natSpecimens$identifications[[x]]$defaultClassification$genus
c.species=natSpecimens$identifications[[x]]$defaultClassification$specificEpithet
c.count=natSpecimens$numberOfSpecimen[[x]]
c.id=natSpecimens$sourceSystemId[[x]]
row <- data.frame(cbind(species=paste(c.genus,c.species),counts=c.count,sequenceID=c.id))
natSpecies <- bind_rows(natSpecies, row)
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
}
## Remove NAs
natSpecies$counts[is.na(natSpecies$counts)] <- 0
## Update data type and sum unique species record counts
natSpecies$counts <- as.numeric(as.character(natSpecies$counts))
natSpecies <- aggregate(natSpecies$counts,
by=list(natSpecies$species,natSpecies$sequenceID),sum)
## Rename columns
colnames(natSpecies) <- c("species", "sequence_id", "counts")
## Adopt respective taxonomic unit for synonymous names
# natSpecies <- left_join(natSpecies, nsrSynonyms[2:3], by=c("species"="synonym_name"))
# natSpecies <- left_join(natSpecies, nsrSpecies[1:2], by=c("species_id"))
# natSpecies$species_name <- coalesce(natSpecies$species_name, natSpecies$species)
# natSpecies <- natSpecies[,c(5,2,3)]
# ## Match species against the NSR
# natCoverage <- merge(natSpecies, nsrSpecies[c(2:3)], by="species_name")
write.csv(natSpecies, file=sprintf('%s/data/exports/naturalis.csv', REPO_HOME),
row.names=FALSE, fileEncoding="utf-8")
## Clean up query variables
rm(x, row, queryParams, list = ls()[grep("^c.", ls())])
library(rmarkdown)
library(data.table)
library(taxizedb)
library(myTAI)
library(tidyr)
library(shiny)
library(DT)
library(plyr)
library(dplyr)
library(stringr)
library(d3Tree)
library(billboarder)
library(nbaR)
setwd('..')
REPO_HOME <- paste(dirname(getwd()), sep = "")
REPO_HOME
getwd()
wfbi_taxonomy.file <- sprintf('%s/data/input_files/WFBI_taxonomy.csv', REPO_HOME)
wfbiTaxonomy.file <- sprintf('%s/data/input_files/WFBI_taxonomy.csv', REPO_HOME)
wfbiTaxonomy <- read.csv(wfbiTaxonomy.file, encoding="UTF-8", sep = "\t",  na.strings="NA")
wfbiTaxonomy.file <- sprintf('%s/data/input_files/WFBI_taxonomy.csv', REPO_HOME)
wfbiTaxonomy <- read.csv(wfbiTaxonomy.file, encoding="UTF-8", sep = "\t",  na.strings="NA")
wfbiTaxonomy <- read.csv(wfbiTaxonomy.file, encoding="UTF-8", sep = ",",  na.strings="NA")
wfbiTaxonomy.file <- sprintf('%s/data/input_files/WFBI_taxonomy.xlsx', REPO_HOME)
wfbiTaxonomy <- read.csv(wfbiTaxonomy.file, encoding="UTF-8", sep = "\t",  na.strings="NA")
View(wfbiTaxonomy)
library(readxl)
install.packages("readxl")
library(readxl)
install.packages("readxl")
install.packages("xlsx")
install.packages(readxl)
install.packages(xlsx)
install.packages("readxl")
library(readxl)
install.packages("readxl")
library("readxl")
install.packages("readxl")
install.packages("readxl")
install.packages("readxl")
install.packages("readxl")
install.packages("readxl")
install.packages("readxl")
install.packages("readxl")
library(readxl)
