import argparse
import collections

import pandas as pd
import csv
from datetime import datetime


def get_coverage_table_stats(coverage_table):
    stats = {
        "ranks": {},
        "species": {},
        "occurrences": {},
        "barcoded_species": {}
    }
    df = pd.read_csv(coverage_table, sep='\t', error_bad_lines=False, warn_bad_lines=True,
                     quoting=csv.QUOTE_NONE)
    df.fillna('', inplace=True)
    df = df[~df["kingdom"].isin(["Chromista", "Amoebozoa"])]

    for k in df.kingdom.unique():
        df_kingdom = df[df["kingdom"] == k]
        # ranks per kingdom
        stats["ranks"][k] = dict(df_kingdom["rank"].value_counts())
        stats["species"][k] = df_kingdom[df_kingdom["rank"] == "species"]

        stats["barcoded_species"][k] = {}
        stats["barcoded_species"][k]["arise"] = stats["species"][k][stats["species"][k].arise_bc != 0]["species"]
        stats["barcoded_species"][k]["other"] = stats["species"][k][stats["species"][k].not_arise_bc != 0]["species"]
        stats["barcoded_species"][k]["all"] = stats["species"][k][stats["species"][k].total_bc != 0]["species"]

        # occurrence status
        stats["occurrences"][k] = dict(df_kingdom["occ_status"].value_counts())

    return stats


def compare_stats(new_stats, old_stats):
    comparison_stats = {}

    for k in sorted(new_stats["ranks"]):
        dfn = new_stats["species"][k]
        dfo = old_stats["species"][k]
        common_species_name = set(list(dfn["species"])).intersection(set(list(dfo["species"])))

        only_new = set(list(dfn["species"])) - set(list(dfo["species"]))
        only_old = set(list(dfo["species"])) - set(list(dfn["species"]))

        dfn_c = dfn[dfn["species"].isin(common_species_name)]
        dfn_c = dfn_c.set_index(["species"])
        # remove duplicated problematic species
        dup_index_dfn_c = dfn_c.index.duplicated()
        if dup_index_dfn_c.any():
            print("Warning: duplicated species ignored:")
            print(dfn_c[dup_index_dfn_c])
            dfn_c = dfn_c[~dup_index_dfn_c]
        dfo_c = dfo[dfo["species"].isin(common_species_name)]
        dfo_c = dfo_c.set_index(["species"])

        # remove duplicated problematic species
        dup_index_dfo_c = dfo_c.index.duplicated()
        if dup_index_dfo_c.any():
            print("Warning: duplicated species ignored:")
            print(dfo_c[dup_index_dfo_c])
            dfo_c = dfo_c[~dup_index_dfo_c]

        df_n = dfn[dfn["species"].isin(only_new)]
        df_n = df_n.set_index(["species"])
        df_o = dfo[dfo["species"].isin(only_old)]
        df_o = df_o.set_index(["species"])

        concat_dt = pd.concat([dfn_c, dfo_c["total_bc"], dfo_c["arise_bc"]], axis=1)
        cols = list(concat_dt.columns)
        cols[-1] = "o_arise_bc"
        cols[-2] = "o_total_bc"
        concat_dt.columns = cols

        comparison_stats[k] = {
            "common": {
                "list": common_species_name,
                "new_barcoded": {
                    "all": list(concat_dt[(concat_dt.total_bc != 0) & (concat_dt.o_total_bc == 0)].index),
                    "arise": list(concat_dt[(concat_dt.arise_bc != 0) & (concat_dt.o_arise_bc == 0)].index),
                },
                "lost_barcoded": list(concat_dt[(concat_dt.total_bc == 0) & (concat_dt.o_total_bc != 0)].index),
            },
            "new": {
                "list": only_new,
                "barcoded_arise": list(df_n[df_n.arise_bc != 0].index),
                "barcoded_other": list(df_n[df_n.not_arise_bc != 0].index),
            },
            "removed": {
                "list": only_old,
                "barcoded_arise": list(df_o[df_o.arise_bc != 0].index),
                "barcoded_other": list(df_o[df_o.not_arise_bc != 0].index),
            }
        }

    return comparison_stats


if __name__ == '__main__':
    # process command line arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('coverage_table', help="Coverage table generated by compute_barcode_coverage")
    parser.add_argument('--old_coverage_table',
                        help="Another coverage table generated by compute_barcode_coverage to compare with")
    args = parser.parse_args()


    """
    # what we want:
     per Kingdom:
        - Number of each ranks
        - all Number of occurrences status
        - Number of barcode species
        - number of species newly barcoded
        - number of species not barcoded anymore
        - number of new species:
            - Number of barcoded ones by ARISE
            - Number of barcoded ones by others
        - number of species removed
            - Number of barcoded ones by ARISE
            - Number of barcoded ones by others

    """

    stats = get_coverage_table_stats(args.coverage_table)
    with open("coverage_table_stats_%s.tsv" % "{:%b_%d_%Y}".format(datetime.now()), "w") as fw:
        for k in sorted(stats["ranks"]):
            for level in stats["ranks"][k]:
                if level != "kingdom":
                    fw.write(f"{k}_{level}_count\t{stats['ranks'][k][level]}\n")

        for k in sorted(stats["ranks"]):
            for oc in sorted(stats["occurrences"]["Animalia"]):
                if not oc:
                    oc = "none"
                if oc in stats["occurrences"][k]:
                    fw.write(f"{k}_{oc}_count\t{stats['occurrences'][k][oc]}\n")
                else:
                    fw.write(f"{k}_{oc}_count\t{0}\n")

        for k in sorted(stats["ranks"]):
            for typ in sorted(stats["barcoded_species"][k]):
                fw.write(f"{k}_{typ}_barcoded_species_count\t{len(stats['barcoded_species'][k][typ])}\n")

    if args.old_coverage_table:
        old_stats = get_coverage_table_stats(args.old_coverage_table)
        comparison_stats = compare_stats(stats, old_stats)

        with open("coverage_table_stats_%s.tsv" % "{:%b_%d_%Y}".format(datetime.now()), "a+") as fw:
            fw.write("\n")
            for k in sorted(stats["ranks"]):
                bc_sp = comparison_stats[k]['common']['list']
                bc_sp_n = comparison_stats[k]['common']['new_barcoded']["all"]
                bc_sp_n_a = comparison_stats[k]['common']['new_barcoded']["arise"]
                bc_sp_r = comparison_stats[k]['common']['lost_barcoded']
                n_sp = comparison_stats[k]['new']['list']
                n_sp_ab = comparison_stats[k]['new']['barcoded_arise']
                n_sp_ob = comparison_stats[k]['new']['barcoded_other']
                l_sp = comparison_stats[k]['removed']['list']
                l_sp_ab = comparison_stats[k]['removed']['barcoded_arise']
                l_sp_ob = comparison_stats[k]['removed']['barcoded_other']
                fw.write(f"{k}_shared_species\t{len(bc_sp)}\n")
                fw.write(f"{k}_new_barcoded_species\t{len(bc_sp_n)}\t{'; '.join(bc_sp_n)}\n")
                fw.write(f"{k}_new_barcoded_species_arise\t{len(bc_sp_n_a)}\t{'; '.join(bc_sp_n_a)}\n")
                fw.write(f"{k}_lost_barcoded_species\t{len(bc_sp_r)}\t{'; '.join(bc_sp_r)}\n")
                fw.write(f"{k}_new_species\t{len(n_sp)}\t{'; '.join(n_sp)}\n")
                fw.write(f"{k}_new_species_barcoded_arise\t{len(n_sp_ab)}\t{'; '.join(n_sp_ab)}\n")
                fw.write(f"{k}_new_species_barcoded_other\t{len(n_sp_ob)}\t{'; '.join(n_sp_ob)}\n")
                fw.write(f"{k}_lost_species\t{len(l_sp)}\t{'; '.join(l_sp)}\n")
                fw.write(f"{k}_lost_species_barcoded_arise\t{len(l_sp_ab)}\t{'; '.join(l_sp_ab)}\n")
                fw.write(f"{k}_lost_species_barcoded_other\t{len(l_sp_ob)}\t{'; '.join(l_sp_ob)}\n")
